/**
 * Data provided either as bytes ({@link Uint8Array}) or their base64 string
 * representation.
 */
export type BytesOrB64 = Uint8Array | string;

/**
 * Deprecated.
 */
export interface EncryptBytes {
    /**
     * A {@link Uint8Array} containing the bytes to encrypt.
     */
    data: Uint8Array;
    /**
     * A base64 string containing the encryption key.
     */
    keyB64: string;
}

/**
 * Deprecated.
 *
 * A variant of {@link EncryptBytes} with the data as a JSON value.
 */
export interface EncryptJSON {
    /**
     * The JSON value to encrypt.
     *
     * This can be an arbitrary JSON value, but since TypeScript currently
     * doesn't have a native JSON type, it is typed as {@link unknown}.
     */
    jsonValue: unknown;
    /**
     * A base64 string containing the encryption key.
     */
    keyB64: string;
}

/**
 * The result of encryption using the secretbox APIs.
 *
 * It contains an encrypted data and a randomly generated nonce that was used
 * during encryption. Both these values are needed to decrypt the data. The
 * nonce does not need to be secret.
 *
 * See: [Note: 3 forms of encryption (Box | Blob | Stream)].
 */
export interface EncryptedBox2 {
    /**
     * The data to decrypt.
     */
    encryptedData: BytesOrB64;
    /**
     * The nonce that was used during encryption.
     *
     * The nonce is required to decrypt the data, but it does not need to be
     * kept secret.
     */
    nonce: BytesOrB64;
}

export interface EncryptedBoxB64 {
    /**
     * The encrypted data as a base64 string.
     */
    encryptedData: string;
    /**
     * The nonce that was used during encryption, as a base64 string.
     *
     * The nonce is required to decrypt the data, but it does not need to be
     * kept secret.
     */
    nonce: string;
}

/**
 * The result of encryption using the secretstream APIs in one-shot mode.
 *
 * It contains an encrypted data and a header that should be provided during
 * decryption. The header does not need to be secret.
 *
 * See: [Note: 3 forms of encryption (Box | Blob | Stream)].
 *
 * This type is a combination of {@link EncryptedBlobBytes_2} and
 * {@link EncryptedBlobB64_2} which allows the decryption routines to accept
 * either the bytes or the base64 variants produced by the encryption routines.
 */
export interface EncryptedBlob_2 {
    /**
     * The encrypted data.
     */
    encryptedData: BytesOrB64;
    /**
     * The decryption header.
     *
     * While the exact contents of the header are libsodium's internal details,
     * it effectively contains a random nonce generated by libsodium. It does
     * not need to be secret, but it is required to decrypt the data.
     */
    decryptionHeader: BytesOrB64;
}

/**
 * A variant of {@link EncryptedBlob_2} that has the encrypted data and header
 * as bytes ({@link Uint8Array}s).
 */
export interface EncryptedBlobBytes_2 {
    /**
     * The encrypted data.
     */
    encryptedData: Uint8Array;
    /**
     * The decryption header.
     *
     * While the exact contents of the header are libsodium's internal details,
     * it effectively contains a random nonce generated by libsodium. It does
     * not need to be secret, but it is required to decrypt the data.
     */
    decryptionHeader: Uint8Array;
}

/**
 * A variant of {@link EncryptedBlob_2} that has the encrypted data and header
 * as base64 strings.
 */
export interface EncryptedBlobB64_2 {
    /**
     * The encrypted data as a base64 string.
     */
    encryptedData: string;
    /**
     * A base64 string containing the decryption header.
     *
     * While the exact contents of the header are libsodium's internal details,
     * it effectively contains a random nonce generated by libsodium. It does
     * not need to be secret, but it is required to decrypt the data.
     */
    decryptionHeader: string;
}

/**
 * The result of encryption using the secretbox APIs.
 *
 * It contains the encrypted data (bytes) and nonce (base64 encoded string)
 * pair. Both these values are needed to decrypt the data. The nonce does not
 * need to be secret.
 *
 * See: [Note: 3 forms of encryption (Box | Blob | Stream)].
 */
export interface EncryptedBoxBytes {
    /**
     * A {@link Uint8Array} containing the encrypted data.
     */
    encryptedData: Uint8Array;
    /**
     * A base64 string containing the nonce used during encryption.
     *
     * A randomly generated nonce for this encryption. It does not need to be
     * confidential, but it will be required to decrypt the data.
     */
    nonceB64: string;
}

/**
 * A decryption request to decrypt data encrypted using the secretbox APIs. The
 * encrypted Box's data is provided as bytes.
 *
 * See: [Note: 3 forms of encryption (Box | Blob | Stream)].
 */
export interface DecryptBoxBytes {
    /**
     * A {@link Uint8Array} containing the bytes to decrypt.
     */
    encryptedData: Uint8Array;
    /**
     * A base64 string containing the nonce that was used during encryption.
     *
     * The nonce is required to decrypt the data, but it does not need to be
     * kept secret.
     */
    nonceB64: string;
    /**
     * A base64 string containing the encryption key.
     */
    keyB64: string;
}

/**
 * A variant of {@link DecryptBoxBytes} with the encrypted Blob's data as a
 * base64 encoded string.
 */
export interface DecryptBoxB64 {
    /**
     * A base64 string containing the data to decrypt.
     */
    encryptedDataB64: string;
    /**
     * A base64 string containing the nonce that was used during encryption.
     *
     * The nonce is required to decrypt the data, but it does not need to be
     * kept secret.
     */
    nonceB64: string;
    /**
     * A base64 string containing the encryption key.
     */
    keyB64: string;
}

/**
 * Deprecated.
 *
 * A variant of {@link DecryptBlobBytes} with the encrypted Blob's data as a
 * base64 encoded string.
 */
export interface DecryptBlobB64 {
    /**
     * A base64 string containing the data to decrypt.
     */
    encryptedDataB64: string;
    /**
     * A base64 string containing the decryption header that was produced during
     * encryption.
     *
     * The header contains a random nonce and other libsodium metadata. It does
     * not need to be kept secret.
     */
    decryptionHeaderB64: string;
    /**
     * A base64 string containing the encryption key.
     */
    keyB64: string;
}
